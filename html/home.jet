<!Doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
 
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.1.2/dist/css/datepicker-bs4.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

    <title>Chat Home</title>
    <link rel="stylesheet" type="text/css" href="../static/css/styles.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css" integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" crossorigin="anonymous" />
   
    <style>
        .chat {
        color: lightseagreen;
    }
     .gold {
        color: goldenrod;
    }

    .purple {
        color: purple;
        outline: 2px solid purle;
    }
    .chatbox {
        outline: 3px solid silver;
        min-height: 160px;
        padding: 0.5em;
    }
    
    </style>
</head>

<body>
<div class="container">
    <div class="row">
        <div class="col">
            <h1 class="mt-4 chat">Chat Page</h1>
      
            <hr>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8 mt-3 gold">
            <h3>Chat</h3>
            <div class="form-group mt-3">
                <label for="username">Username</label>
                <input type="text" name="username" id="username" class="form-control purple" autocomplete="false">
            </div>
           
             <div class="form-group mt-3">
                <label for="message">Message</label>
                <input type="text" name="message" id="message" class="form-control purple" autocomplete="false">
            </div>

            <hr>
            <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>

            <input type="hidden" home="action" id="action">
            
            <div id="status" class="mt-2 float-end"></div>

            <br>

            <div id="output" class="chatbox mt-3">


            </div>
        </div>
        <div class="col-md-4 chat mt-3">
            <h3>Who's Online</h3>
            <ul id="online-users"></ul>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js" integrity="sha384-SR1sx49pcuLnqZUnnPwx6FCym0wLsk5JZuNx2bPPENzswTNFaQU1RDvt3wT4gWFG" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.min.js" integrity="sha384-j0CNLUeiqtyaRmlzUHCPZ+Gy5fQu0dQ6eZ/xAww941Ai1SxSY+0EQqNXNE6DZiVc" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js" integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" crossorigin="anonymous"></script>

<script src="/static/reconnecting-websocket.min.js"></script>
<script>
  let socket = null;
  let output = document.getElementById("output");
  let userField = document.getElementById("username");
  let messageField = document.getElementById("message");

  window.onbeforeunload = function () {
  console.log("leaving");
  let jsonData = {};
  jsonData["action"] = "left";
  socket.send(JSON.stringify(jsonData));
};

document.addEventListener("DOMContentLoaded", function () {
  socket = new ReconnectingWebSocket("ws://127.0.0.1:3001/ws", null, {debug: true, reconnectInterval: 3000});
const offline = `<span class="badge bg-danger">Not Connected</span>`;
const online = `<span class="badge bg-success">Connected</span>`;
let statusDiv = document.getElementById("status");

 socket.onopen = () => {
    console.log("Successfully connected");
    successMessage("Connected!");
    //socket.send(successMessage("A user connected"));
    statusDiv.innerHTML = online
  };

  socket.onclose = () => {
    console.log("Connection closed");
    statusDiv.innerHTML = offline
  };

  socket.onerror = (error) => {
    console.log("There was an error");
    statusDiv.innerHTML = offline
  };

  socket.onmessage = (msg) => {
    // console.log(msg);
    let data = JSON.parse(msg.data);
    console.log("Action is ", data.action);

    switch (data.action) {
      case "listUsers":
        let ul = document.getElementById("online-users");
        while (ul.firstChild) ul.removeChild(ul.firstChild);

        if (data.connectedUsers.length > 0) {
          data.connectedUsers.forEach(function (item) {
            let li = document.createElement("li");
            li.appendChild(document.createTextNode(item));
            ul.appendChild(li);
          });
        }
      break;

      case "broadcast":
        output.innerHTML = output.innerHTML + data.message + "<br>";
        break;
      
    }
  };

  //let userInput = document.getElementById("username");
  userField.addEventListener("change", function () {
    let jsonData = {};
    jsonData["action"] = "username";
    jsonData["username"] = this.value;

    socket.send(JSON.stringify(jsonData));
    successMessage(`You have connected as user: ${jsonData["username"]}`)
    
  });

   document
    .getElementById("message")
    .addEventListener("keydown", function (event) {
      if (event.code === "Enter") {
        if (!socket) {
          console.log("No Connection");
          //Display Alert
          return false;
        }
    if (userField.value === "" || messageField.value === "") {
      errorMessage("Fill out user field and message field");
      return false;
    }else {
      sendMessage();
      }
        
        event.preventDefault();
        event.stopPropagation();
     
      }
    });

    document.getElementById("sendBtn").addEventListener("click", function () {
    if (userField.value === "" || message.value === "") {
      errorMessage("Fill out user field and message field");
      return false;
    }else {
      sendMessage();
      }
  });
});

function sendMessage() {
  let jsonData = {};
  jsonData["action"] = "broadcast";
  jsonData["username"] = userField.value;
  jsonData["message"] = messageField.value;
  socket.send(JSON.stringify(jsonData));

  messageField.value = "";
}

function errorMessage(msg) {
  notie.alert({
    type: "error", // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
    text: msg,
  });
}

function successMessage(msg) {
  notie.alert({
    type: "success", // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
    text: msg,
  });
}


</script>
</html>